
NOTE: Name of directory is the name of the app and will recur in the module code throughout so choose carefully!!!

1) create project directory and cd into it.

2) generate app with '>yo angular' command.
	- SASS w/Compass: Y
	- Bootstrap: Y
	- Bootsrap for SASS: Y
	- include all defaults (resources, cookies, sanitize, routes)
	{let the generator run}

3) Install additional dependencies with npm and bower:

	'>npm install [dependency-name] --save-dev':
		"karma-jasmine": "^0.1.5",
	    "karma-chrome-launcher": "^0.1.3",
	    "phantomjs": "^1.9.7-5",
	    "karma-phantomjs-launcher": "^0.1.4"

	'>bower install [dependency-name] --save-dev'
	    "d3"
	    "gsap"

4) Test app with '>grunt karma' command.

5) Remove warning (comment out) in karma.conf.js (line 22).

6) Add plugins to karma.conf.js (around line 29).

	// plugins for use with karma.
    plugins: [
      "karma-jasmine",
      "karma-phantomjs-launcher"
    ],

7) Change karma.conf.js (line 55) and karma-e2e.conf.js files (line 40) to use PhantomJS instead of Chrome.

8) Edit Gruntfile.js (line 368) to include new unit and e2e test configs:

	OLD:

	// Test settings
    karma: {
      unit: {
        configFile: 'karma.conf.js',
        singleRun: true
      }
    }

   NEW:

   // Test settings
    karma: {
      e2e: {
        configFile: 'karma-e2e.conf.js',
        singleRun: true
      },
      unit: {
        configFile: 'karma.conf.js',
        singleRun: true
      }
    }

9) Edit Gruntfile.js (line 402) to include new unit and e2e test tasks:

	OLD:

	// Original Test included in generator.
	 grunt.registerTask('test', [
	    'clean:server',
	    'concurrent:test',
	    'autoprefixer',
	    'connect:test',
	    'karma'
	  ]);

	NEW:

	grunt.registerTask('test:e2e', [
	    'clean:server',
	    'concurrent:test',
	    'autoprefixer',
	    'connect:livereload',
	    'karma:e2e'
	]);

	grunt.registerTask('test:unit', [
	    'clean:server',
	    'concurrent:test',
	    'autoprefixer',
	    'connect:test',
	    'karma:unit'
	]);

10) Create a new directory under app/test named 'e2e' and inside that directory a file named 'scenarios.js' with the following code inside:

== start scenario.js code:

	'use strict';

	describe('appName', function() {

	    beforeEach(function() {
	        browser().navigateTo('/');
	    });

	    describe('Homepage', function() {
	        it('should display the correct route', function() {
	            expect(browser().location().path()).toBe('/');
	        });
	    });

	});

== end scenario.js code.

11) Run app with '>grunt serve' command.

12) Run unit and e2e tests to verify configs are good.

	NOTE: the tests can be run by executing the commands:

	>grunt test:unit
	>grunt test:e2e

	NOTE: e2e tests require grunt serve to be executing already.

13) If you get an ENOTEMPTY empty error on the e2e scenario during the clean phase due to the .tmp directory, add the following line to your Gruntfile.js (at line 118):

	// Empties folders to start fresh
    clean: {
      options: {force: true}, 			<=== Insert this line of code.
      dist: {
        files: [{
          dot: true,
          src: [
            '.tmp',
            '<%= yeoman.dist %>/*',
            '!<%= yeoman.dist %>/.git*'
          ]
        }]
      },
      server: '.tmp'
    },

NOTE: if you have any issues with livereload, ensure that your Gruntfile.js (on line 70) indicates port 35729. That is the only port that will work for livereload when using browser extensions. This poort number is not intended ot be changed though there is a hidden setting to do so using an HttpPort preference command or LRPPortOverride env var command (for multiple instances).

14) Develop...

NOTE: Additional controllers, views (partials), routes, etc. can be generated by using the following commands:

>yo angular (aka angular:app)
>yo angular:controller COMPONENT_NAME
>yo angular:directive COMPONENT_NAME
>yo angular:filter COMPONENT_NAME
>yo angular:route COMPONENT_NAME
>yo angular:service COMPONENT_NAME
>yo angular:provider COMPONENT_NAME
>yo angular:factory COMPONENT_NAME
>yo angular:value COMPONENT_NAME
>yo angular:constant COMPONENT_NAME
>yo angular:view COMPONENT_NAME

>yo [angular:decorator] (#decorator) COMPONENT_NAME

NOTE: using yo angular:route ROUTE_NAME will also invoke the controller and view generators and add a corresponding unit test as well under 'app/test/spec/controllers/new_test.js'.

